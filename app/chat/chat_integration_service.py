
import openai
import os
from sqlalchemy.orm import Session
from app.helpers import load_user_data, save_chat_history

class ChatIntegrationService:
    def __init__(self, db_session: Session, user_id: int):
        self.db_session = db_session
        self.user_id = user_id
        openai.api_key = os.getenv("OPENAI_API_KEY")
        
        # Load initial user data
        self.user_data = load_user_data(self.db_session, self.user_id)
        
        # Define system message for the assistant's purpose
        self.system_message = {
            "role": "system",
            "content": (
                "You are Ava AI, a CV assistant who guides users through creating a professional CV. "
                "Ask questions step-by-step to gather details like contact info, experience, and skills. "
                "Save each response and confirm the information before proceeding. Track previous messages to ensure continuity."
            )
        }
        
        # Initialize conversation context
        self.conversation_history = [{"role": "system", "content": self.system_message['content']}]
        
        # Start with user data as the initial message
        if self.user_data:
            self.conversation_history.append({"role": "user", "content": self.user_data})
        
    async def handle_message(self, user_message: str) -> str:
        try:
            # Add user's message to conversation history
            self.conversation_history.append({"role": "user", "content": user_message})
            
            # Call OpenAI's GPT model, including all previous conversation messages
            response = openai.ChatCompletion.create(
                model="gpt-4o-mini",
                messages=self.conversation_history,
                max_tokens=150,
                temperature=0.7
            )
            
            # Get assistant's reply and add it to conversation history
            assistant_reply = response['choices'][0]['message']['content']
            self.conversation_history.append({"role": "assistant", "content": assistant_reply})
            
            # Save to chat history
            save_chat_history(self.db_session, self.user_id, user_message, assistant_reply)
            
            # Return the assistant's reply
            return assistant_reply
        except Exception as e:
            print(f"Error in OpenAI API call: {e}")
            return "There was an error processing your request. Please try again."
    
    async def print_cv(self) -> str:
        # Generate the final CV in markdown format based on gathered conversation
        user = self.db_session.query(User).filter(User.id == self.user_id).first()
        degrees = self.db_session.query(Degrees).filter(Degrees.user_id == self.user_id).all()

        if user:
            cv_content = (
                f"# {user.full_name}\n\n"
                f"## Contact Information\n"
                f"- **Email:** {user.email}\n"
                f"- **LinkedIn:** {user.linkedin_profile}\n\n"
                
                f"## Skills\n"
                f"{user.skills}\n\n"
                
                f"## Education\n" +
                "\n".join([f"- **{degree.degree_name}**, {degree.institution} ({degree.graduation_year})" for degree in degrees]) +
                
                f"\n\n"
                f"---\n\n"
                f"*Generated by Ava AI CV Assistant*"
            )
            return cv_content
        return "User details not found. Unable to generate CV."
